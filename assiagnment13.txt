1. What advantages do Excel spreadsheets have over CSV spreadsheets?
ans:
 1. We can easily format the data.
 2. We can explore the data by visualisation,
 3. It has multiple sheets.
 4. Formulas and Functions.
 5. Data Validation.

2.What do you pass to csv.reader() and csv.writer() to create reader and writer objects?
ans:
 You have to pass the names of the files and the modes of the files.

3. What modes do File objects for reader and writer objects need to be opened in?
ans:
 The Reader object will be in the 'read' mode.
 The Writer object will be in the 'write' mode.

4. What method takes a list argument and writes it to a CSV file?
ans:
 
The csv.writer() object in Python provides a writerow() method that takes a list as 
its argument and writes the elements of the list as a new row in a CSV file.

5. What do the keyword arguments delimiter and line terminator do?
ans:
 The delimiter keyword argument is used to specify the character that separates fields 
 in a CSV file. By default, the comma (,) character is used as the delimiter, but it can 
 be changed to any other character, such as a tab character (\t) or a semicolon (;).
 
 The line terminator keyword argument is used to specify the character that separates lines 
 in a CSV file. By default, it is set to the newline (\n) character, which starts a new line 
 after each row of data.

6. What function takes a string of JSON data and returns a Python data structure?
ans:
 
The json.loads() function takes a string of JSON data and returns a Python data structure. 
The json module in Python provides methods to encode Python objects as JSON strings and decode 
JSON strings into Python objects. The json.loads() function specifically is used to decode a JSON 
string into a Python object.

7. What function takes a Python data structure and returns a string of JSON data?
ans:
 The json.dumps() function takes a Python data structure and returns a string of JSON data. 
 The json module in Python provides methods to encode Python objects as JSON strings and decode 
 JSON strings into Python objects. The json.dumps() function specifically is used to encode a 
 Python object as a JSON-formatted string.