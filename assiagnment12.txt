1. In what modes should the PdfFileReader() and PdfFileWriter() File objects will be opened?
ans:
 The PdfFileReader() is used to get the data in read only mode and the PdfFileWriter is used to 
 modify or create new file data in write mode.

2. From a PdfFileReader object, how do you get a Page object for page 5?
ans:
 We can use the get page method to get the page number and it starts with index number '0'.
 
 from PyPDF2 import PdfFileReader
 
 with open('example.pdf', 'rb') as file:
    
    pdf_reader = PdfFileReader(file)

    page_five = pdf_reader.getPage(4)

3. What PdfFileReader variable stores the number of pages in the PDF document?
ans:
  The PdfFileReader class provides a variable called numPages that stores the number of pages in 
  the PDF document.
  
  from PyPDF2 import PdfFileReader

  with open('example.pdf', 'rb') as file:
 
      pdf_reader = PdfFileReader(file)

      num_pages = pdf_reader.numPages

  print(f'The PDF document has {num_pages} pages.')

4. If a PdfFileReader object’s PDF is encrypted with the password swordfish, what must you do
before you can obtain Page objects from it?
ans:
 You have to pass the password in the PdfFileReader() function along with the file name.
 
 from PyPDF2 import PdfFileReader

 with open('example.pdf', 'rb') as file:
 
      pdf_reader = PdfFileReader(file,'swordfish')

      num_pages = pdf_reader.numPages

5. What methods do you use to rotate a page?
ans:
 To rotate a page in a PDF document using PyPDF2, you can use the rotateClockwise() and 
 rotateCounterClockwise() methods of a Page object.

6. What is the difference between a Run object and a Paragraph object?
ans:
Run object:
 A Run object is a part of a Paragraph object and represents a contiguous run of text within a 
 paragraph that has the same formatting. For example, if a paragraph contains the text "Hello, world!" where 
 "Hello" is bold and "world!" is underlined, there would be two Run objects within the Paragraph object - one
 for the bold text and one for the underlined text.

Paragraph Object:
 A Paragraph object represents a single paragraph of text in a Word document. It contains properties such 
 as the style, text content, and formatting information.

 7. How do you obtain a list of Paragraph objects for a Document object that’s stored in a variable
named doc?
ans:
 If you have a document called 'doc', then you can use doc.paragraphs attribute to get the list of
 paragraph objects.
 
 from docx import Document

 doc = Document('my_document.docx')

 paragraphs = doc.paragraphs
 
8. What type of object has bold, underline, italic, strike, and outline variables?
ans:
 The Paragraph Object has all the above features.

9. What is the difference between False, True, and None for the bold variable?
ans:
 False means that the text is not bold.
 True means that the text is bold.
 None means that the bold property is not explicitly set for the Run object. 
 In this case, the default behavior will depend on the style of the Run object's containing.

10. How do you create a Document object for a new Word document?
ans:
 First you have to create the object for the Document() class and you can use the methods inside that
 class.

 from docx import Document

 doc = Document()

 # Add a new paragraph to the document
 doc.add_paragraph('This is a new paragraph.')

 # Save the document to a file
 doc.save('my_new_document.docx')

11. How do you add a paragraph with the text 'Hello, there' to a Document object stored in a
variable named doc?
ans:
 from docx import Document

 doc1 = Document('doc')

 doc1.add_paragraph('Hello, there')
 
 doc1.save('doc.docx')

 

