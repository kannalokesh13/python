Q1. What is the difference between __getattr__ and __getattribute__?
ans:
 __getattr__ is called only when an attribute is not found through normal lookup. It is a fallback method 
 that is invoked after the attribute cannot be found in the object's dictionary or its class hierarchy. It 
 allows you to define custom behavior when accessing non-existent attributes.

__getattribute__ is called for every attribute access, regardless of whether the attribute exists or 
not. It is a more general method that is always invoked before any attribute lookup. It allows you to define 
custom behavior for all attribute accesses, including existing attributes.

Q2. What is the difference between properties and descriptors?
ans:

 Properties: Properties are a high-level, built-in way to define computed attributes. They are defined by 
 decorating methods or using the @property decorator. Properties allow you to define custom logic for getting, 
 setting, and deleting attributes, and they are accessed like regular attributes. Properties provide a simple and 
 convenient way to encapsulate attribute access and perform validation or computation on attribute values.

Descriptors: Descriptors are a lower-level mechanism for controlling attribute access. They involve defining 
special methods (__get__, __set__, __delete__) within a separate descriptor class. Descriptors are typically assigned to 
class attributes, and they intercept attribute access and modification operations. They provide more fine-grained control 
over attribute access than properties and can be shared among multiple attributes in a class.

Q3. What are the key differences in functionality between __getattr__ and __getattribute__, as well as
properties and descriptors?
ans:
 Properties: Properties are a high-level, built-in way to define computed attributes. They are defined by 
 decorating methods or using the @property decorator. Properties allow you to define custom logic for getting, 
 setting, and deleting attributes, and they are accessed like regular attributes. Properties provide a simple and 
 convenient way to encapsulate attribute access and perform validation or computation on attribute values.
__getattr__ is called when an attribute is not found through normal lookup, while __getattribute__ is called for every attribute access.
__getattr__ is a fallback method for accessing non-existent attributes, while __getattribute__ is a general method for all attribute accesses.

Descriptors: Descriptors are a lower-level mechanism for controlling attribute access. They involve defining 
special methods (__get__, __set__, __delete__) within a separate descriptor class. Descriptors are typically assigned to 
class attributes, and they intercept attribute access and modification operations. They provide more fine-grained control 
over attribute access than properties and can be shared among multiple attributes in a class.