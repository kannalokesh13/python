Q1. Which two operator overloading methods can you use in your classes to support iteration?
ans:
  we can use 
  1. __iter__
  2. __next__

Q2. In what contexts do the two operator overloading methods manage printing?
ans:
  By implementing these two methods, you can make your class iterable and support iteration 
  using constructs like for loops.

Q3. In a class, how do you intercept slice operations?
ans:
  To intercept slice operations in a class, you can define the __getitem__() method and handle the slice 
  notation within this method. The __getitem__() method is called when an item is accessed using square brackets, 
  allowing you to customize the behavior of your class when slice operations are performed.

Q4. In a class, how do you capture in-place addition?
ans:
To capture in-place addition in a class, you can define the __iadd__() method. This method is called when the 
+= operator is used to perform in-place addition on an instance of your class. It allows you to customize the 
behavior of the in-place addition operation.

Q5. When is it appropriate to use operator overloading?:
ans:
 Operator overloading is appropriate to use when you want to define custom behavior for operators on objects of a class. 
 It allows you to give your objects the ability to interact with operators in a way that makes sense within the context 
 of your class.

