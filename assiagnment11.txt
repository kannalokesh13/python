1. Create an assert statement that throws an AssertionError if the variable spam is a negative
integer.
ans:
 assert spam >= 0

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain
strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are
considered the same, and 'goodbye' and 'GOODbye' are also considered the same).
ans:
  s1 = eggs.lower()
  s2 = bacon.lower()
  assert s1 != s2

3. Create an assert statement that throws an AssertionError every time.
ans:
 assert False

4. What are the two lines that must be present in your software in order to call logging.debug()?
ans:
  import logging
  import os 

5. What are the two lines that your program must have in order to have logging.debug() send a
logging message to a file named programLog.txt?
ans:
  import logging
  
  logging.basicConfig(filename='programLog.txt', level=logging.DEBUG)

 logging.debug("this message will print")

6. What are the five levels of logging?
ans:
  1. debug
  2. info
  3. warning
  4. error
  5. critical

7. What line of code would you add to your software to disable all logging messages?
ans:

 import logging
 logging.disable(logging.CRITICAL + 1)
 
8.Why is using logging messages better than using print() to display the same message?
ans:
 The logging messages will be maintained in the log files, so it is better to use than the 
 print statements.

9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
ans:
 Step Over: 
    This button executes the current line of code and then moves to the next line, without stepping into 
    any function calls on that line. If the current line contains a function call, the function is executed,
    but the debugger will not stop at the first line of the function.

 Step In: 
   This button executes the current line of code and then moves to the next line, but if the current 
   line contains a function call, the debugger will stop at the first line of the called function. This 
   allows you to step through the function's code line-by-line and inspect its state.

 Step Out: 
   This button is used when you are currently stepping through a function and want to return to the line 
   of code that called the function. It executes the rest of the function code without stopping, and then returns
   control to the line of code that called the function. This is useful if you are stepping through a long function 
   and want to return to the higher-level code that called it.

10.After you click Continue, when will the debugger stop ?
ans: 
  When you click the Continue button in a debugger, it instructs the program to continue running normally until the 
  next breakpoint is encountered, or until the program finishes executing. The debugger will not stop again until it
  hits another breakpoint, encounters an exception or error, or reaches the end of the program.